{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome","title":"Welcome","text":"<p>Info</p> <p>This is a documenation made using material for mkdocs,  hosted on github pages, just like the official goboscript documentation.</p> <p>Welcome to the documentation for the inflation of goboscript.</p> <p>Scroll to the bottom to see where to go next</p>"},{"location":"gstest/","title":"gstest","text":""},{"location":"gstest/#gstest","title":"gstest","text":"<p>gstest allows you to run automated tests on goboscript projects</p> <p>Note</p> <ul> <li>It's currently rather slow (~2mins) because of playright.</li> <li>It's probably possible to speed this up using docker but I do not know how to use it.</li> <li>If you know how to and are willing to, please do open a pull request!</li> </ul>"},{"location":"gstest/#usage","title":"Usage","text":"<p>Warning</p> <p>This assumes: - You are using inflator to handle dependencies - You have a <code>/test/</code> inflator project</p> <p>Add <code>.github/workflows/gstest.yml</code> to your GitHub repository:</p> <pre><code>name: Run /test/\n\non:\n  pull_request:\n    branches: ['main']\n  push:\n    branches: ['main']\n  release:\n    types: [prereleased, published]\n  workflow_dispatch:\n\njobs:\n  tests:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n    - uses: inflated-goboscript/gstest@v0.0.4  # change this to the most recent version\n</code></pre> <p>gstest dependencies</p> <p>These are some of the dependencies installed by the gstest action:</p> <ul> <li>goboscript</li> <li>inflator</li> <li>TW-CLI<ul> <li>playwright</li> </ul> </li> </ul>"},{"location":"inflator/","title":"Inflator","text":""},{"location":"inflator/#inflator","title":"inflator","text":"<p>Inflator is a goboscript package manager, which inflates gobos,  and is the backbone of efficient goboscript package management.</p> <p>This section documents the usage of inflator.</p> <p>Inflator is written in Python, just like backpack.</p>"},{"location":"inflator/behaviour/","title":"Behaviour","text":""},{"location":"inflator/behaviour/#behaviour","title":"Behaviour","text":"<p>Inflator uses a loosely pip inspired syntax.</p> <p>Note</p> <p>Inflator will try to behave like the old backpack version when dealing with <code>goboscript.toml</code>. In the future, it will probably not support the current backpack version/syntax.</p> <p>Inflator looks for an <code>inflator.toml</code> file when looking for config and dependencies. It is similar to goboscript's <code>goboscript.toml</code> file.</p>"},{"location":"inflator/gtp/","title":"GTP","text":""},{"location":"inflator/gtp/#gtp","title":"GTP","text":"<p>The goboscript table of packages</p> <p>The GTP is inflator's package index.</p> <p>What's a package index?</p> <p>A package index is centralised, searchable repository of packages which package developers can use to distribute their packages.</p> <p>The GTP stores a key-value mapping of (inflated) goboscript packages, which are easy to install.</p>"},{"location":"inflator/gtp/#installing-from-the-package-index","title":"Installing from the package index","text":"<p>Installing from the GTP is very easy. Simply:</p> <p><code>inflate install &lt;name&gt;</code></p> <p>So long as &lt;name&gt; is not located in the current working directory, inflator will look it up on the GTP. If it is found, it will install from the GitHub repository that the GTP registry refers to.</p> <p>e.g. cmath -&gt; https://github.com/inflated-goboscript/cmath</p>"},{"location":"inflator/gtp/#registering-a-package-on-the-package-index","title":"Registering a package on the package index","text":"<p>Register a package using this issue template. A bot will automatically close the issue and add it to the registry, if valid, within a minute.</p> <p>The bot's source code is available here. It's called the bfg.</p> <p>Info</p> <p>The bfg is currently hosted using pythonanywhere, which seems to be somewhat unstable. If the bot does not respond to your issue, ping me (@faretek1) on discord or GitHub, and I'll sort it out.</p>"},{"location":"inflator/installation/","title":"Installation","text":""},{"location":"inflator/installation/#installation","title":"Installation","text":"<p>You can install the inflator using pipx.</p> <p><code>pipx install inflator</code></p> Info <p>If you want to install the bleeding-edge version (straight from source): 1. <code>git clone https://github.com/inflated-goboscript/inflator</code> 2. <code>cd inflator</code> 3. <code>pip install -e .</code></p> <p>If you want to update it, just run <code>git pull</code></p> <p>You can now access the <code>inflate</code> command. Verify that <code>inflate -h</code> shows a help menu like this:</p> <pre><code>usage: inflate [-h] [-i INPUT] [-V] [-L] {install,find,parse,toml,new,set} ...\n\nManage libraries for use in goboscript.\n\npositional arguments:\n  {install,find,parse,toml,new,set}\n    install             Install a package\n    find                Locate a package with a name/version/creator. Can also be used to list out installed pkgs. It is globbed.\n    parse               Parse gstoml or iftoml file\n    toml                Add an inflator.toml file to cwd\n    new                 Create an (inflated) goboscript project\n    set                 Set config in cookies.json\n\noptions:\n  -h, --help            show this help message and exit\n  -i INPUT, --input INPUT\n                        Set input directory for syncing. Default is cwd\n  -V, --version         Get inflator version number\n  -L, --log-folder      Get log folder\n\nWhen called with no args: Sync libraries in the current directory.\n</code></pre>"},{"location":"inflator/installation/#config","title":"config","text":"<p>It is recommended to set up a PAT for your GitHub account.</p>"},{"location":"inflator/installation/#setting-up-a-pat","title":"Setting up a PAT","text":"<p>This simply increases the rate limit for the GitHub api, from 60/hr to 5000/hr</p> <ol> <li>Go here and make a classic token with no permissions.</li> <li>Copy token</li> <li>Run <code>inflate set auth-token &lt;value that you copied&gt;</code></li> <li>Verify that the value is stored in <code>%appdata%/faretek/inflate/cookies.json</code> (windows)  or <code>home/.faretek/inflate/cookies.json</code> (linux)</li> </ol>"},{"location":"inflator/other%20commands/","title":"Other commands","text":""},{"location":"inflator/other%20commands/#other-commands","title":"other commands","text":"<p>This is a section that should be split into more details subsections</p>"},{"location":"inflator/other%20commands/#documentation","title":"documentation","text":""},{"location":"inflator/other%20commands/#pypi","title":"pypi","text":"<p>Inflator will try to behave like the old backpack version when dealing with <code>goboscript.toml</code>. In the future, it will probably not support the current backpack version/syntax.</p> <p>If you want to integrate your project with inflator, add an <code>inflator.toml</code> file to your project. This is the file that inflator will look at for config and dependencies.</p>"},{"location":"inflator/other%20commands/#installing-packagesgobos","title":"Installing packages/gobos","text":"<p>Inflator uses a loosely pip inspired syntax.</p> <p>The command for installing packages is  <code>inflate install</code></p> <ul> <li>For installing a local package:<ul> <li>Ensure an <code>inflator.toml</code> file is provided (see below)</li> <li>cd to inside your package, to the same level as <code>inflator.toml</code></li> <li>run <code>inflate install .</code></li> </ul> </li> </ul> <p>[!NOTE] You can find public gobos at https://github.com/topics/inflated-goboscript</p> <ul> <li> <p>For installing GitHub packages</p> <ul> <li>run <code>inflate install &lt;link to github repository&gt;</code></li> <li>Optionally supply a version (tag name): <code>inflate install &lt;link to github repository&gt; -V &lt;version&gt;</code></li> </ul> </li> <li> <p>For local package development</p> <ul> <li>You can install an 'editable' package using the <code>-e</code> flag.</li> <li><code>inflate install -e .</code></li> <li>This will store a symlink in your appdata instead of copying the folder, which means that changes to the original   package will take effect instantly. This is like how <code>pip installe -e .</code> behaves</li> </ul> </li> </ul> <p>Inflator will avoid installing packages which have already been installed (same username, reponame and version). To override this, use the <code>-U</code> flag.</p> <p>[!NOTE] If you are a package developer using inflator, you can upload your gobos to GitHub. Remember to provide <code>inflator.toml</code>. Please also add the <code>inflated-goboscript</code> tag to your repository </p>"},{"location":"inflator/other%20commands/#syncing-packagesgobos","title":"Syncing packages/gobos","text":"<p>Inflator.toml syntax:</p> <pre><code># These 3 are used for local installating of a package.\n# They are only needed if you are making your own package.\n# `username` is only needed to keep locally installed packages linked to a specific user.\n# But it is recommended to always include your username here\nname = \"&lt;name of your package, e.g. 'projectenv'&gt;\"\nversion = \"&lt;version string, e.g. v0.0.0&gt;\"\nusername = \"&lt;Your username, e.g. FAReTek1&gt;\"\n\n[dependencies]\n# This is used by any project that has dependencies\n# Use a package by relative path\nvec2 = \"../vec2\"\n\n# use an existing installed package\n# WARNING: This will NOT work with inflate install!\n# This assumes that you have already INSTALLED a package named `quat`\n# e.g. from GitHub, or locally\nquat = \"quat\"\n\n# Use a GitHub repository\ngeo2d = \"https://github.com/FAReTek1/geo2d\"\n\n# Use a GitHub repository with a version.\n# Version numbers also work with globbing\ngeo2d_v7 = [\"https://github.com/FAReTek1/geo2d\", \"v*.*.7\"]\n\n# Use an INSTALLED package with a version\n# These version nums can also be globbed\npenv-inf = [\"projectenv-inflated\", \"v0.0.2\"]\n\n# Use an INSTALLED package with a version and specify a username\npenv-inf = [\"projectenv-inflated\", \"v0.0.2\", \"faretek1\"]\n</code></pre> <p>If you are creating a package, do not include dependencies which rely on something already being installed (because inflator will try to evaluate them when trying to install your package, and will not be able to find their source)</p> <p>To sync packages:</p> <p>[!NOTE] If you are on windows, you will need permissions to create symlinks</p> <ol> <li>cd to your goboscript project</li> <li>run <code>inflate</code></li> <li>if you want to do this without cding, do <code>inflate -i &lt;dir&gt;</code></li> <li>pkgs will end up in <code>inflate/</code> or <code>backpack/</code> as symlinks</li> </ol>"},{"location":"inflator/other%20commands/#other-commands_1","title":"Other commands","text":""},{"location":"inflator/other%20commands/#inflate-find","title":"inflate find","text":"<p>This lists out all packages that fit the specified name, username, or version</p> <p>Syntax: <code>inflate find [reponame] -U [username] -V [version]</code></p> <p>Globbing is allowed You can omit all fields to list out all installed gobos.</p>"},{"location":"inflator/other%20commands/#inflate-parse","title":"inflate parse","text":"<p>This prints out what inflator makes of a <code>goboscript.toml</code> or <code>inflator.toml</code> file. Used for development, but you can use it too.</p> <p>Syntax: <code>inflate parse [filepath]</code></p>"},{"location":"inflator/other%20commands/#inflate-toml","title":"inflate toml","text":"<p>This auto generates an <code>inflator.toml</code> file for you. Recommended to run with <code>goboscript new &lt;args&gt;</code> Make sure you set your username or else</p>"},{"location":"inflator/other%20commands/#inflate-v","title":"inflate -V","text":"<p>Prints out the inflate version</p>"},{"location":"inflator/other%20commands/#inflate-l","title":"inflate -L","text":"<p>Prints out the path to the log folder</p>"},{"location":"inflator/other%20commands/#development-installation","title":"development installation","text":"<ol> <li>clone the GitHub repository</li> <li>cd to the repo directory</li> <li>do <code>pip install -e .</code></li> <li>you can use inflate using <code>inflate &lt;args&gt;</code></li> </ol>"},{"location":"inflator/usage/getting%20started/","title":"Getting Started","text":""},{"location":"inflator/usage/getting%20started/#getting-started","title":"Getting started","text":"<p>This section covers making a project and installing dependencies with inflator</p> <p>Warning</p> <p>Before doing anything here, install goboscript, as it is required for the rest of this tutorial.</p> <p>It is also recommended to use VSCode with the goboscript editor integration as an IDE of choice.</p> <p>Let's make a new project with inflator. We'll call it <code>tutorial</code>.</p> <p>Run <code>inflate new tutorial</code>. This makes a new project in the directory <code>tutorial</code>. Now open that folder in your IDE.</p> <p>Here is what mine looks like:</p> <p></p> What's the difference between this and goboscript new? <ol> <li>Inflator also adds an <code>inflator.toml</code> file</li> <li>There is not as much customisation, e.g. disabling the automatic initialisation of a git repository</li> </ol> How can I use the behaviour from goboscript new? <ol> <li>Make a project with <code>goboscript new &lt;args&gt;</code></li> <li>Run <code>inflate toml</code> within that directory. This will create the inflator.toml file.</li> </ol> <p>Now that we have a goboscript project, check that you can run it using <code>goboscript build</code>. This will generate a sb3 file that you can run in TurboWarp.</p> <p>If you have TurboWarp bound to the <code>.sb3</code> file type, run <code>start tutorial.sb3</code> (windows) or <code>xdg-open tutorial.sb3</code> (linux).</p> <p>You should get a 'Hello World' program like this:</p> <p></p>"},{"location":"inflator/usage/installing%20packages/","title":"Installing Packages","text":""},{"location":"inflator/usage/installing%20packages/#installing-packages-from-the-gtp","title":"Installing packages from the gtp","text":"<p>The purpose of inflator is to let you create and install packages. The latter is easier so let's do that first.</p> <p>The command for installing packages is  <code>inflate install</code></p> <p>We are going to install a package (called a gobo) from the  gtp</p> <p>Let's install cmath and use that.</p> Warning <p>There are a few issues with some niche functions in cmath</p>"},{"location":"inflator/usage/installing%20packages/#installing-cmath","title":"Installing cmath","text":"<p>Inflator has a similar syntax to pip, so you just do <code>inflate install cmath</code></p> <p>If everything goes well, you should find it say <code>Installed cmath v1.0.1 by FAReTek1 into &lt;appdata directory&gt;</code>. It should also have installed <code>math</code>, which is a dependency of <code>cmath</code>.</p> <p>Now that you have installed cmath, you now have to add it as a dependency in <code>inflator.toml</code>. Like so:</p> <pre><code># inflator.toml syntax documentation: https://github.com/inflated-goboscript/inflator#inflator\nname = \"tutorial\"\nversion = \"v0.0.0\"\nusername = \"if this is left blank then -9999 aura \ud83d\udc80\" # (1)\n\n[dependencies]\ncmath = \"cmath\"\n</code></pre> <ol> <li>You can change this to your username if it bothers you.</li> </ol> <p>Now, run <code>inflate</code>. This will sync the packages and place them in the <code>inflator/</code> directory.</p> <p>We can now <code>%include</code> cmath.</p> <pre><code>%include inflator/math  # (1)\n%include inflator/cmath\n\n\ncostumes \"blank.svg\";\n\nonflag {\n    say \"Hello, World!\";\n}\n</code></pre> <ol> <li>Due to a goboscript bug, nested <code>%includes</code> is unstable. For now, you need to include every dependency separately.</li> </ol> <p>Note</p> <p>If you ever want to update a package you are using, you can use <code>inflate install -U &lt;pkg&gt;</code> to upgrade it.</p> <p>Let's use some complex math now:</p> <pre><code>%include inflator/math\n%include inflator/cmath\n\n\ncostumes \"blank.svg\";\n\nonflag {\n    Complex i = Complex(0, 1);\n\n    Complex result = c_pow(i, i);\n\n    say c_str(result);\n}\n</code></pre> <p>This program demonstrates the result of doing <code>i</code> ** <code>i</code>. You may notice that the result is actually entirely real!</p>"},{"location":"tw-cli/","title":"TW-CLI","text":""},{"location":"tw-cli/#tw-cli","title":"TW-CLI","text":"<p>Run scratch projects in the terminal</p> <p>pypi</p> <ul> <li>Uses playwright and turbowarp scaffolding</li> <li>Supports the turbowarp debugger's log, warn, error and breakpoint blocks.</li> <li>Supports exit codes with the <code>TW-CLI: exit code</code> variable for all sprites.</li> </ul>"},{"location":"tw-cli/installation/","title":"Installation","text":""},{"location":"tw-cli/installation/#installation","title":"Installation","text":"<p><code>pip install turbowarp-cli</code></p> Bleeding edge <p>Install from source:</p> <ol> <li><code>git clone https://github.com/inflated-goboscript/tw-cli</code></li> <li><code>cd tw-cli</code></li> <li><code>pip install -e .</code></li> <li>to update, use <code>git pull</code></li> </ol>"},{"location":"tw-cli/usage/","title":"Usage","text":""},{"location":"tw-cli/usage/#usage","title":"Usage","text":"<p><code>twcli run</code> &lt;Project path&gt;</p> <p>It only works on project files.</p> <p>If you want to automatically supply inputs to <code>ask and wait</code> blocks, use the -i command:</p> <p><code>twcli run .\\Project.sb3 -i \"hi\" \"there</code></p> <p>This provides the arguments: - <code>hi</code> - <code>there</code></p> <p>If you want to disable headless mode (to see the browser), use <code>-H</code>:</p> <p><code>twcli run .\\Project.sb3 -i \"hi\" \"there\" -H</code></p>"}]}